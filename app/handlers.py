from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import app.keyboards as kb


router = Router()
scheduler = AsyncIOScheduler()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"""–ü—Ä–∏–≤–µ—Ç {message.from_user.username}! –ù–∞ —Å–≤—è–∑–∏ –±–æ—Ç @careBGPUbot
–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ.""",
        reply_markup=kb.main_keyboard)


@router.message(F.text == 'üë©‚Äç‚ù§Ô∏è‚Äçüë®–ú–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ–ª–æ–¥—ã—Ö —Å–µ–º–µ–π')
async def set_message_list(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=kb.support_keyboard)

@router.message(F.text == 'üìã–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –æ–±—Ä–∞–∑—Ü—ã –∑–∞—è–≤–ª–µ–Ω–∏—è')
async def set_message_list(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=kb.contacts_keyboard)

@router.message(F.text == 'üè†–ö–ª—É–± –º–æ–ª–æ–¥—ã—Ö —Å–µ–º–µ–π –ë–ì–ü–£ ¬´–û—á–∞–≥¬ª')
async def set_message_list(message: Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏:", reply_markup=kb.club_keyboard)

@router.message(F.text == '‚ùì–ú—ã —Å—Ç–∞–ª–∏ –º–æ–ª–æ–¥–æ–π —Å–µ–º—å–µ–π, —á—Ç–æ –¥–∞–ª—å—à–µ?')
async def set_message_list(message: Message):
    await message.answer(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–µ–º—å–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –ë–ì–ü–£", reply_markup=kb.registration_keyboard)

@router.message(F.text == '‚úèÔ∏è–í–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç')
async def set_message_list(message: Message):
    await message.answer(text="–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–ø—Ä–æ—Å –∞–Ω–æ–Ω–∏–º–Ω—ã–π, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–µ–±—è –æ–±–æ–∑–Ω–∞—á–∏—Ç—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ—Å—å –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É)")


@router.message(F.text == '‚¨ÖÔ∏è–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def set_message_list(message: Message):
    await message.answer(text="–°–ª—É–∂–±–∞ –∑–∞–±–æ—Ç—ãü§ó", reply_markup=kb.main_keyboard)

# @router.message(F.text.lower() == 'admin')
# async def admin_menu(message: Message):
#     if message.from_user.username in read_config()["Admins"]:
#         await message.answer(f'–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
#                              reply_markup=kb.admin_keyboard)
#     else:
#         await message.answer(f'–¢—ã –Ω–µ –∞–¥–º–∏–Ωüò°')
#
# @router.callback_query(F.data.startswith('user'))
# async def del_admin(callback: CallbackQuery):
#     data = read_config()
#     if callback.data.split(": ")[1] not in ["Mrkykypy3a", "lilith_sl"]:
#         data["Admins"].remove(callback.data.split(": ")[1])
#         write_config(data)
#         await callback.message.answer(f'–ê–¥–º–∏–Ω —É–¥—ë–ª—ë–Ω', reply_markup=await kb.inline_admins())
#     else:
#         await callback.message.answer(f'–ò—Ö –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å!', reply_markup=await kb.inline_admins())
#
# @router.callback_query(F.data == 'append')
# async def write_admin(callback: CallbackQuery, state: FSMContext):
#     await state.set_state(Admin.login)
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
#
# @router.message(Admin.login)
# async def add_admin(message: Message, state: FSMContext):
#     await state.update_data(login=message.text)
#     data = read_config()
#     login = await state.get_data()
#     data["Admins"].append(login["login"])
#     write_config(data)
#     await state.clear()
#     await message.answer(f'–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=await kb.inline_admins())
#
# @router.message(Newsletter.subscription)
# async def write_link(message: Message, state: FSMContext):
#     await state.update_data(subscription=message.text)
#     await state.set_state(Newsletter.link)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:")
#
#
# @router.message(Newsletter.link)
# async def write_link(message: Message, state: FSMContext):
#     await state.update_data(link=message.text)
#     await state.set_state(Newsletter.data)
#     await message.answer("""–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–∞—Å—Å—ã–ª–∫–∏:\n
# –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (–ú–°–ö): –ì–æ–¥ –ú–µ—Å—è—Ü –î–µ–Ω—å –ß–∞—Å –ú–∏–Ω—É—Ç—ã""")
#
#
# @router.message(Newsletter.data)
# async def edit_message_list(message: Message, state: FSMContext):
#     await state.update_data(date=message.text)
#     config = read_config()
#     data = await state.get_data()
#     try:
#         temp = dict()
#         scheduler.remove_all_jobs()
#         scheduler.add_job(send_newsletter_everyone, 'date', run_date=str(custom_date))
#         await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞', reply_markup=kb.admin_keyboard)
#     except Exception as e:
#         print(e)
#         await message.answer('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
#     await state.clear()
#
# @router.message(People.login)
# async def send_newsletter(message: Message, state: FSMContext):
#     scheduler.add_job(send_newsletter_one, 'date',
#                       run_date=str(datetime.now() + timedelta(seconds=5)),
#                       args=[message.text])
#     await message.answer(f"""–ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏–¥—ë—Ç —Ä–∞—Å—Å—ã–ª–∫–∞""")
#     await state.clear()


# @router.message()
# async def handle_unmatched_message(message: Message):
#     await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=kb.main_keyboard)
